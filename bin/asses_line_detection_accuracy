#!/usr/bin/env ruby

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib asses_line_detection_accuracy]))

require 'trollop'
require 'fileutils'

opts = Trollop::options do
	version "asses_line_dectection_accuracy 0.0.1 (c) 2011 Vicente Bosch Campos"
	banner <<-EOS
asses_line_dectection_accuracy is a command tool to review the accuracy of the detected lines against the orinal line
label file by means of the edit distance.
Usage:
	asses_line_dectection_accuracy [options]
	where [options] are:
EOS

opt :test_list_file, "file containing the list of samples used for test", :type => :string
opt :test_result_file, "file containing the resulting lines detected for each test sample", :type => :string
opt :target_result_file, "file containing the target line delimitations for all samples", :type => :string
end

Trollop::die :test_list_file, "Test list file was not defined" unless opts[:test_list_file]
Trollop::die :test_list_file, "Indicated test list file does not exist" unless File.exist?(opts[:test_list_file])

Trollop::die :test_result_file, "Test result file was not defined" unless opts[:test_result_file]
Trollop::die :test_result_file, "Indicated test result file does not exist" unless File.exist?(opts[:test_result_file])

Trollop::die :target_result_file, "Target result file path was not defined" unless opts[:target_result_file]
Trollop::die :target_result_file, "Indicated target result file does not exist" unless File.exist?(opts[:target_result_file])



filter_list=AssesLineDetectionAccuracy::SampleList.new(opts[:test_list_file])

test_result=AssesLineDetectionAccuracy::MultiSampleDefenitionList.new(opts[:test_result_file],filter_list)



test_result.set_line_reader do |line|
  tmp = line.split
  {:start => tmp[0].to_i/100000, :end => tmp[1].to_i/100000, :tag => tmp[2]}
end

test_result.set_tag_filter do |formatted_line|
  tmp = false
  tmp = true if formatted_line[:tag] == "BS"
  tmp = true if formatted_line[:tag] == "IL"
  tmp
end

test_result.read

filter_list.reset_processed

train_target=AssesLineDetectionAccuracy::MultiSampleDefenitionList.new(opts[:target_result_file],filter_list)

train_target.set_line_reader do |line|
  tmp = line.split
  {:start => tmp[0].to_i, :end => tmp[1].to_i, :tag => tmp[2]}
end

train_target.set_tag_filter do |formatted_line|
  tmp = false
  tmp = true if formatted_line[:tag] == "BS"
  tmp = true if formatted_line[:tag] == "IL"
  tmp
end

train_target.read

command = "/Users/vbosch/Documents/UPV/Thesis/normalized_edit_distance/bin/text_line_normalized_edit_distance"
count_accum = 0.0
cost_accum = 0.0
length_accum = 0.0
accum_2 = 0.0
operations={:insertion => 0, :deletion=> 0 , :substitution =>0}
results = Array.new
filter_list.each do |sample_name|


  test_result[sample_name].write("test.txt")
  train_target[sample_name].write("target.txt")
  res = `#{command} -x test.txt -y target.txt`

  vals = res.split
  local_cost = vals[4].to_f
  local_length = vals[6].to_f
  operations[:substitution]+=vals[8].to_i
  operations[:insertion]+=vals[10].to_i
  operations[:deletion]+=vals[12].to_i
  local_sum_square=vals[15].to_f
  local_count = vals[17].to_f

  local_mean = local_cost/local_length
  local_std_dev = Math.sqrt((local_sum_square/local_count) - (local_mean**2))
  puts "#{sample_name} --> mean: #{local_mean.to_s.ljust(20)} std_dev: #{local_std_dev.to_s.ljust(20)} (S: #{vals[8].to_i} I: #{vals[10].to_i} D: #{vals[12].to_i})"


  count_accum += local_count
  cost_accum +=local_cost
  accum_2 +=local_sum_square
  length_accum+=local_length

 # FileUtils.mv "output.txt","#{sample_name}.ops"
  #FileUtils.rm_r Dir.glob("./*.txt")
end

mean = cost_accum / length_accum

std_dev = Math.sqrt(((accum_2/count_accum) - (mean**2)).abs)

puts "Total: mean: #{mean.to_s.ljust(20)} std_dev: #{std_dev.to_s.ljust(20)} (S: #{operations[:substitution]} I: #{operations[:insertion]} D: #{operations[:deletion]})"